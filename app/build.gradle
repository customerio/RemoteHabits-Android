plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "io.customer.remotehabits"
        minSdkVersion 16
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "io.customer.remotehabits.AndroidTestTestRunner"
    }
    buildFeatures {
        viewBinding true
    }

    signingConfigs {
        release {
            storeFile rootProject.file('upload.keystore')
            storePassword System.getenv("ANDROID_SIGNING_STORE_PASSWORD")
            keyAlias System.getenv("ANDROID_SIGNING_ALIAS")
            keyPassword System.getenv("ANDROID_SIGNING_KEY_PASSWORD")
        }
    }

    buildTypes {
        debug {
            defaultConfig.minSdkVersion 23 // makes compiling faster and allows us to not require multidex support for older SDKs
            defaultConfig.multiDexEnabled true // required for getting instrumentation tests to build
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    packagingOptions {
        exclude 'META-INF/AL2.0'
        exclude 'META-INF/LGPL2.1'
    }

    testOptions {
        animationsDisabled = true

        unitTests {
            returnDefaultValues = true
            // From: http://robolectric.org/getting-started/
            includeAndroidResources = true
        }
    }
    sourceSets {
        // Put code into below directory that you want shared between unit and integration tests.
        String sharedTestDir = 'src/sharedTest/java'
        test.java.srcDirs += sharedTestDir
        androidTest.java.srcDirs += sharedTestDir
    }
}

dependencies {
    // kotlin
    def coroutineVersion = "1.4.2"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.4.1'
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutineVersion"
    androidTestImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutineVersion") {
        // conflicts with mockito due to direct inclusion of byte buddy
        // see: https://github.com/Kotlin/kotlinx.coroutines/issues/2023#issuecomment-665150312
        exclude group: "org.jetbrains.kotlinx", module: "kotlinx-coroutines-debug"
    }

    // AndroidX
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation "androidx.fragment:fragment-ktx:1.3.3"
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'

    // Customer.io SDK
    implementation 'io.customer.android:sdk:0.1.1-alpha'

    // Android architecture, lifecycle
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.3.1"
    androidTestImplementation "androidx.arch.core:core-testing:2.1.0"
    testImplementation "androidx.arch.core:core-testing:2.1.0"

    // Firebase
    implementation platform('com.google.firebase:firebase-bom:28.1.0')
    implementation 'com.google.firebase:firebase-messaging-ktx'
    implementation 'com.google.firebase:firebase-crashlytics-ktx'

    // Hilt
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-android-compiler:$hilt_version"
    // Hilt testing: Robolectric (note: if using jetpack hilt integrations, add those as test dependencies, too)
    testImplementation "com.google.dagger:hilt-android-testing:$hilt_version"
    kaptTest "com.google.dagger:hilt-android-compiler:$hilt_version"
    // Hilt testing: Android instrumentation tests (note: if using jetpack hilt integrations, add those as test dependencies, too)
    androidTestImplementation "com.google.dagger:hilt-android-testing:$hilt_version"
    kaptAndroidTest "com.google.dagger:hilt-android-compiler:$hilt_version"

    // Retrofit
    def retrofitVersion = '2.9.0'
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofitVersion"

    // Coil for loading remote images
    implementation 'io.coil-kt:coil:1.2.1'

    // OkHttp Note: adding okhttp to use newer v4 API instead of v3 with Retrofit
    def okhttpVersion = "4.9.0"
    implementation(platform("com.squareup.okhttp3:okhttp-bom:$okhttpVersion"))
    implementation("com.squareup.okhttp3:okhttp")
    androidTestImplementation "com.squareup.okhttp3:mockwebserver:$okhttpVersion"
    testImplementation "com.squareup.okhttp3:mockwebserver:$okhttpVersion"

    // Moshi
    def moshiVersion = '1.9.3'
    implementation "com.squareup.moshi:moshi:$moshiVersion"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:$moshiVersion"
    implementation "com.squareup.moshi:moshi-adapters:$moshiVersion"

    // JUnit
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'

    // Truth
    testImplementation "com.google.truth:truth:1.0.1"
    androidTestImplementation "com.google.truth:truth:1.0.1"
    androidTestImplementation 'androidx.test.ext:truth:1.3.0'
    testImplementation 'androidx.test.ext:truth:1.3.0'

    // Mockito
    def mockitoVersion = '3.3.3'
    def mockitoKotlinVersion = '2.2.0'
    testImplementation "org.mockito:mockito-inline:$mockitoVersion" // you can mock final classes in JVM tests but not Android
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$mockitoKotlinVersion", {
        exclude group: 'org.jetbrains.kotlin'
        exclude group: 'org.mockito'
    }
    androidTestImplementation "org.mockito:mockito-android:$mockitoVersion"
    androidTestImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$mockitoKotlinVersion", {
        exclude group: 'org.jetbrains.kotlin'
        exclude group: 'org.mockito'
    }

    // Robolectric
    testImplementation 'org.robolectric:robolectric:4.5.1'

    // Android Testing Support Library's runner and rules
    def androidTestLibVersion = "1.3.0"
    testImplementation "androidx.test:core-ktx:$androidTestLibVersion"
    testImplementation "androidx.test:runner:$androidTestLibVersion"
    testImplementation "androidx.test:rules:$androidTestLibVersion"
    androidTestImplementation "androidx.test:core-ktx:$androidTestLibVersion"
    androidTestImplementation "androidx.test:runner:$androidTestLibVersion"
    androidTestImplementation "androidx.test:rules:$androidTestLibVersion"

    // Espresso UI Testing
    def espressoVersion = '3.3.0'
    testImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
}
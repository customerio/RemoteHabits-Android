# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

require 'json'

def is_pull_request(github_context)
  return github_context["event"]["pull_request"] != nil 
end

def is_push(github_context)
  return github_context["event"]["commits"] != nil 
end

default_platform(:android)

platform :android do

  # example for main builds: `bundle exec fastlane android deploy_app version:1.0.0"`
  # example for develoment builds (pull request, push): `bundle exec fastlane deploy_app`
  lane :deploy_app do |values|    
    new_app_version = values[:version] # default 
    is_main_build = new_app_version != nil && new_app_version != ""
    new_build_number = Time.now.to_i # make the build number always unique. we do this with time. 
    release_notes = ["app: Remote Habits Android"]
    groups = ['development', 'QA'] # default - always send to these groups. 

    if is_main_build
      UI.message("Deploying a main build of app. Version: #{new_app_version}")

      groups.append("main-builds") 

      release_notes.append(
        "build type: main",
        "version: #{new_app_version}"
      )
    else 
      UI.message("Deploying a development build of app.")

      # github_context only provided for non main builds. only construct it here in this else case. 
      github_context = JSON.parse(ENV["GITHUB_CONTEXT"]) # json string

      if is_pull_request(github_context) 
        UI.message("I see this is a pull request. Build metadata will include helpful PR info.")

        pull_request_title = github_context["event"]["pull_request"]["title"]
        pull_request_number = github_context["event"]["pull_request"]["number"]
        source_branch = github_context["head_ref"]
        destination_branch = github_context["base_ref"]
        commit_hash = github_context["sha"][0..8]
        
        new_app_version = "PR.#{pull_request_number}.#{commit_hash}"

        release_notes.append(
          "build type: pull request",
          "title: #{pull_request_title} (#{pull_request_number})",
          "author: #{github_context["event"]["pull_request"]["user"]["login"]}",
          "source branch: #{source_branch}",
          "destination branch: #{destination_branch}",
          "commit hash: #{commit_hash}"
        )
      elsif is_push(github_context) 
        UI.message("I see this is a git commit push. Build metadata will include helpful commit info.")

        branch_name = github_context["event"]["ref"].split("/").last # getting the last part of `refs/heads/test-dump` is the branch name
        commit_hash = github_context["event"]["head_commit"]["id"][0..8] # the sha of the commit

        new_app_version = "#{branch_name}.#{commit_hash}" 

        release_notes.append(
          "build type: push",
          "message: #{github_context["event"]["head_commit"]["message"]}",
          "author: #{github_context["event"]["head_commit"]["committer"]["username"]}",
          "branch: #{branch_name}",
          "commit hash: #{commit_hash}"
        )
      end 
    end 

    release_notes = release_notes.join("\n")
    groups = groups.join(", ")

    UI.important("Release notes:\n#{release_notes}")
    UI.important("New app version: #{new_app_version}")
    UI.important("App testing groups: #{groups}")

    android_set_version_name(version_name: new_app_version)
    android_set_version_code(version_code: new_build_number)

    build_android_app(
      task: 'assemble',
      build_type: 'Release'
    )

    firebase_app_distribution(
      app: ENV["FIREBASE_APP_ID"],
      service_credentials_file: './firebase_appdistribution_service_account.json',
      groups: groups,
      release_notes: release_notes
    )
  end 

  lane :instrumentation_tests do |values|
    build_android_app(
      task: 'assemble',
      build_type: 'Debug'
    )
    build_android_app(
      task: 'assemble',
      build_type: 'AndroidTest'
    )

    # https://github.com/pink-room/fastlane-plugin-run_tests_firebase_testlab
    run_tests_firebase_testlab(
      project_id: ENV["FIREBASE_PROJECT_ID"],
      gcloud_service_key_file: './firebase_testlab_service_account.json',
      download_results_from_firebase: true,
      output_dir: "test-results",
      # run `gcloud beta firebase test android models list` to get list of devices to test on 
      devices: [
        # Pixel 4 physical
        { model: "flame", version: "31" }
      ]
    )
  end 
end
